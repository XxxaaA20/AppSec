


*** LINKS ***
https://www.jenkins.io/doc/


Jenkins ставим прямо на хоста - так будет проще с ним взаимодействовать плюс удобнее работать с файлами. Инструкцию по установке можно найти на официальном сайте по ссылке выше.

После установки нужно будет установить необходимые для работы плагины. Список плагинов можно найти в файле Plugins.

Дальше нужно получить креды для доступа ко всем проектам в используемой системе контроля версий и добавить их в Manage Jenkins -> Credentials

По инструкции в файле Pipelines создаем пайплайны

Закидываем скрипты из каталога Scripts на хост с Jenkins в каталог /opt/scripts/jenkins - из этого каталога пайплайны вызывают скрипты

После этого нужно потестить, как всё работает. Для этого выбираем тестовый репозиторий и настраиваем триггеры только на него. В гитлабе можно прожимать кнопку Test и будет тестовый запрос запускать сканы, а в Bitbucket придется реально совершать заданное действие, Test connection там так не сработает. Первая задача добиться запуска стартовых пайплайнов по триггеру, вторая разобраться с возможными ошибками работы пайплайна или скриптов, третья проверить, что каталоги для тестируемого репозитория создались в дженкинсе и в них есть пайплайны сканеров, четвертая добиться корректной работы сканеров и отправки результатов в доджу.

После того, как всё протестировали и всё успешно отработало, настраиваем массовые триггеры. Для Gitlab и Bitbucket действия такие:
GITLAB
Заходим в Admin Area -> System Hooks -> Add New Hook
Вписываем адрес, который сохранили при настройке пайплайна Gitlab_start, токен, выбираем нужный триггер и сохраняем. * Кнопка test может не работать и выдавать ошибки, но сами триггеры при этом могут работать, не стоит доверять кнопке и попробовать сделать выбранное действие в репозитории.

BITBUCKET
Заходим в Projects, выбираем проект, заходим в Project settings -> Webhooks -> Create webhook.
Задаем имя, вписываем URL вместе с токеном в формате https://your-jenkins-url/generic-webhook-trigger/invoke?token=<token>
Выбираем остальные нужные параметры и сохраняем.
Такие действия нужно проделать для каждого проекта, репозитории которого нужно затянуть на автоматические сканы.

В результате мы получим полностью автоматизированный конвейер по проверке кода.


	**************
	*** НЮАНСЫ ***
	**************

Тут оставлю некоторые заметки, которые могут помочь, а могут и нет :)

1. Смена языка на английский. В Jenkins есть возможность установить русский язык для интерфейса (вроде как он его берет вообще из браузера), но перевод реализован очень не очень. Плюс всякие маны и прочее на английском, так что кажется, мастхэв воткнуть себе плагин Locale и в настройках Manage Jenkins -> System долистать до пункта Locale и в Default Language вписать EN и поставить галку игнорировать настройки браузера.

2. По дефолту Jenkins устанавливается в каталог /var/lib/jenkins. В этом каталоге есть файлик config.xml, в котором содержится инфа о настройках, а так же некоторые моменты, которые из веба не настроить. Например, workspaceDir, которая задает каталог, где будут запускаться джобы и размещать свои файлики. В нашей конфигурации этот путь настроен так: <workspaceDir>${JENKINS_HOME}/workspace/${ITEM_FULL_NAME}</workspaceDir> - в такой конфигурации все пайплайны отрабатывают как надо и всё хорошо. Так вот при перезапуске дженкинса этот файлик может возвращаться к дефолтным настройкам, сбивать путь до рабочей директории и еще какие-то настройки. Лучше после финальной настройки всего и вся сделать копию этого файлика на всякий случай, чтобы можно было быстро вернуть всё на свои места.

3. Trivy должн быть установлен на хостовой машине с дженкинсом, так сильно проще и не нужно заморачиваться с подготовкой контейнера.

4. Все пайплайны, скрипты и т.д. предназначены для работы в рамках одной машины. Работа с агентами не тестировалась. Если вдруг понадобятся агенты, то, скорее всего, на агентах нужно будет дублировать все каталоги и скрипты с хостовой машины и как-то дорабатывать пайплайны и скрипты...

5. Если нужно будет запускать сканы руками, то лучше для этих целей сделать отдельные три пайплайна под каждый сканер и через апишку их запускать, передавая в запроче нужные параметры. Например, сделать это для гитлаба можно таким способом:

curl -X POST https://your-jenkins-url/job/0_MANUAL_SCANS/job/1_Manual_Gitleaks/buildWithParameters --user user:token --data-urlencode "SourceRepoHttpUrl=https://gitlab.com/path/repo.git" --data-urlencode "SourceRepoName=repo" --data-urlencode "Branch=master" --data-urlencode "MergeRequestLastCommit=commit" --data-urlencode "SourceRepoHomepage=https://gitlab.com/path/repo" --data-urlencode "Product_type=path" --data-urlencode "Product_name=repo" --data-urlencode "projectFolder=empty" --data-urlencode "serviceName=gitlab"

* Важно назвать пайплайны отлично от шаблонных имен, чтобы при изменении каких-то значений в шаблоне и раскатке их на все каталоги, не затереть настройки для ручных пайплайнов

6. Если вносились какие-то изменения в файлы на самом хосте, то с помощью команды можно обновить информацию для корректного отображения в вебе:
java -jar /usr/local/bin/jenkins-cli.jar -auth user:token -s http://localhost:8080 reload-configuration

















